/* ExpParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ExpParserTokenManager.java */
package org.dflib.exp.parser;
import org.dflib.Exp;

/** Token Manager. */
@SuppressWarnings ("unused")
class ExpParserTokenManager implements ExpParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fffc005fe2L) != 0L)
         {
            jjmatchedKind = 57;
            return 42;
         }
         return -1;
      case 1:
         if ((active0 & 0x1fffc0059e2L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 42;
         }
         if ((active0 & 0x600L) != 0L)
            return 42;
         return -1;
      case 2:
         if ((active0 & 0x22b80018c0L) != 0L)
            return 42;
         if ((active0 & 0x1dd44004122L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
            return 42;
         }
         return -1;
      case 3:
         if ((active0 & 0x10944004102L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
            return 42;
         }
         if ((active0 & 0xd400000020L) != 0L)
            return 42;
         return -1;
      case 4:
         if ((active0 & 0x144004000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
            return 42;
         }
         if ((active0 & 0x10800000102L) != 0L)
            return 42;
         return -1;
      case 5:
         if ((active0 & 0x4004000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
            return 42;
         }
         if ((active0 & 0x140000000L) != 0L)
            return 42;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 37:
         return jjStopAtPos(0, 25);
      case 40:
         return jjStopAtPos(0, 2);
      case 41:
         return jjStopAtPos(0, 4);
      case 42:
         return jjStopAtPos(0, 23);
      case 43:
         return jjStopAtPos(0, 21);
      case 44:
         return jjStopAtPos(0, 3);
      case 45:
         return jjStopAtPos(0, 22);
      case 47:
         return jjStopAtPos(0, 24);
      case 60:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 61:
         return jjStopAtPos(0, 19);
      case 62:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x88000800L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1004000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10800000002L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000200L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x410000020L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000040c0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000001000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2020000100L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000040a0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x114000000L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 42);
         break;
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x42L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000800L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400001000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 42);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4060000000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 103:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 42);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x14000000100L);
      case 109:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 42);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 42);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x4004000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 120:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 42);
         break;
      case 103:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 42);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000100L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 42);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 42);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10040000002L);
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 42);
         break;
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 116:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 1, 42);
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 42);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 42);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x4004000L);
      case 109:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 42);
         break;
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 42);
         break;
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 123;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAddStates(0, 14); }
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAdd(42); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(15, 18); }
                  else if (curChar == 39)
                     { jjAddStates(19, 21); }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if (curChar == 48)
                     { jjAddStates(22, 29); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(30, 33); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(4, 9); }
                  break;
               case 5:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(6, 9); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(37, 40); }
                  break;
               case 11:
                  if (curChar == 39)
                     { jjAddStates(19, 21); }
                  break;
               case 12:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if (curChar == 39 && kind > 55)
                     kind = 55;
                  break;
               case 15:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(17, 13); }
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 18:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 26:
                  if (curChar == 34)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 27:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 29:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 36:
                  if (curChar == 34 && kind > 56)
                     kind = 56;
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(41, 45); }
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 39:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(38); }
                  break;
               case 41:
                  if (curChar != 36)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(42); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(0, 14); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 45:
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(46); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 48:
               case 92:
                  if ((0x3ff000000000000L & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(49, 50); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(51, 9); }
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(53, 9); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(49, 52); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(59); }
                  break;
               case 60:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(61); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(53, 55); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(61, 9); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(56, 59); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(67); }
                  break;
               case 67:
                  if (curChar != 46)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(60, 62); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(63, 66); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(69, 70); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(71, 9); }
                  break;
               case 72:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(67, 69); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(73, 9); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(70, 73); }
                  break;
               case 77:
                  if (curChar == 48)
                     { jjAddStates(22, 29); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(74, 76); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 82:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(77, 79); }
                  break;
               case 83:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(83, 84); }
                  break;
               case 84:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(46); }
                  break;
               case 86:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(80, 82); }
                  break;
               case 87:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(87, 88); }
                  break;
               case 88:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAdd(46); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(91, 92); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(91, 92); }
                  break;
               case 93:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 94:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 95:
                  if ((0xff000000000000L & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 97:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 98:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 99:
                  if ((0x3000000000000L & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(83, 85); }
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(102, 103); }
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(104); }
                  break;
               case 104:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(86, 88); }
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(106, 107); }
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(108); }
                  break;
               case 109:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(89, 91); }
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(111, 112); }
                  break;
               case 112:
               case 122:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAdd(9); }
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(92, 95); }
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(115, 116); }
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(117, 118); }
                  break;
               case 117:
                  if (curChar == 46)
                     { jjCheckNAdd(118); }
                  break;
               case 119:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(96, 98); }
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(121, 122); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(42); }
                  break;
               case 2:
                  if (curChar == 95)
                     { jjAddStates(99, 100); }
                  break;
               case 4:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(101, 102); }
                  break;
               case 7:
                  if (curChar == 95)
                     { jjAddStates(103, 104); }
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 47)
                     kind = 47;
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 14:
                  if (curChar == 92)
                     { jjAddStates(105, 107); }
                  break;
               case 15:
                  if ((0x1c404410000000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 20:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 25:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 28:
                  if (curChar == 92)
                     { jjAddStates(108, 110); }
                  break;
               case 29:
                  if ((0x1c404410000000L & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 30:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 35:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 44:
                  if (curChar == 95)
                     { jjAddStates(111, 112); }
                  break;
               case 46:
                  if ((0x100000001000L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 47:
                  if (curChar == 95)
                     { jjAddStates(113, 114); }
                  break;
               case 49:
                  if (curChar == 95)
                     { jjAddStates(115, 116); }
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(117, 118); }
                  break;
               case 54:
                  if (curChar == 95)
                     { jjAddStates(119, 120); }
                  break;
               case 57:
                  if (curChar == 95)
                     { jjAddStates(121, 122); }
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(123, 124); }
                  break;
               case 62:
                  if (curChar == 95)
                     { jjAddStates(125, 126); }
                  break;
               case 65:
                  if (curChar == 95)
                     { jjAddStates(127, 128); }
                  break;
               case 69:
                  if (curChar == 95)
                     { jjAddStates(129, 130); }
                  break;
               case 71:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(131, 132); }
                  break;
               case 74:
                  if (curChar == 95)
                     { jjAddStates(133, 134); }
                  break;
               case 78:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(74, 76); }
                  break;
               case 80:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 81:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(46); }
                  break;
               case 83:
                  if (curChar == 95)
                     { jjAddStates(135, 136); }
                  break;
               case 85:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 87:
                  if (curChar == 95)
                     { jjAddStates(137, 138); }
                  break;
               case 89:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(91, 92); }
                  break;
               case 91:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(91, 92); }
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 94:
                  if (curChar == 95)
                     { jjAddStates(139, 140); }
                  break;
               case 96:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 98:
                  if (curChar == 95)
                     { jjAddStates(141, 142); }
                  break;
               case 100:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAddTwoStates(101, 104); }
                  break;
               case 101:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(83, 85); }
                  break;
               case 102:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(102, 103); }
                  break;
               case 103:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(104); }
                  break;
               case 105:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(86, 88); }
                  break;
               case 106:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(106, 107); }
                  break;
               case 107:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(108); }
                  break;
               case 108:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(143, 144); }
                  break;
               case 111:
                  if (curChar == 95)
                     { jjAddStates(145, 146); }
                  break;
               case 113:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(92, 95); }
                  break;
               case 115:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(115, 116); }
                  break;
               case 116:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(117, 118); }
                  break;
               case 118:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(147, 148); }
                  break;
               case 121:
                  if (curChar == 95)
                     { jjAddStates(149, 150); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 27:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(15, 18); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 123 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\146\151\162\163\164", "\50", "\54", "\51", "\154\141\163\164", 
"\155\151\156", "\155\141\170", "\163\160\154\151\164", "\151\146", "\157\162", 
"\141\156\144", "\156\157\164", "\41", "\155\141\164\143\150\145\163", "\76", "\76\75", "\74", 
"\74\75", "\75", "\41\75", "\53", "\55", "\52", "\57", "\45", 
"\142\145\164\167\145\145\156", "\141\142\163", "\154\145\156", "\163\165\155", "\143\165\155\163\165\155", 
"\141\166\147", "\155\145\144\151\141\156", "\151\156\164", "\154\157\156\147", 
"\146\154\157\141\164", "\142\157\157\154", "\163\164\162", "\156\165\154\154", "\164\162\165\145", 
"\146\141\154\163\145", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   44, 45, 46, 47, 48, 49, 50, 51, 9, 57, 58, 59, 65, 66, 67, 27, 
   28, 35, 36, 12, 14, 25, 78, 82, 85, 89, 93, 96, 100, 113, 2, 3, 
   4, 9, 7, 9, 10, 6, 7, 9, 10, 27, 28, 38, 35, 36, 54, 9, 
   56, 53, 54, 9, 56, 62, 9, 64, 61, 62, 9, 64, 68, 71, 9, 69, 
   70, 71, 9, 74, 9, 76, 73, 74, 9, 76, 80, 81, 46, 83, 84, 46, 
   87, 88, 46, 102, 103, 104, 106, 107, 108, 111, 112, 9, 115, 116, 117, 118, 
   121, 122, 9, 2, 3, 5, 6, 7, 8, 15, 16, 18, 29, 37, 39, 44, 
   45, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 65, 
   66, 69, 70, 72, 73, 74, 75, 83, 84, 87, 88, 94, 95, 98, 99, 109, 
   110, 111, 112, 119, 120, 121, 122, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ExpParserTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ExpParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(JavaCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 123; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x38087ffffffffffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0xf000000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[123];
    private final int[] jjstateSet = new int[2 * 123];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
