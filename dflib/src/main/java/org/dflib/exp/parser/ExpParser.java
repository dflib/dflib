/* ExpParser.java */
/* Generated By:JavaCC: Do not edit this line. ExpParser.java */
package org.dflib.exp.parser;

import org.dflib.Exp;

/**
  * Parser of the {@link org.dflib.Exp}.
  *
  * @since 2.0
  */
@SuppressWarnings("all")
public class ExpParser implements ExpParserConstants {

    private final ExpTreeBuilder tree = new ExpTreeBuilder();

  final public Exp<?> root() throws ParseException {
    exp();
    jj_consume_token(0);
return tree.root();
}

  final public void exp() throws ParseException {
    switch (jj_nt.kind) {
    case 2:
    case 11:
    case 12:
    case 19:
    case 20:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case TRUE:
    case FALSE:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:{
      boolExp();
      break;
      }
    case 1:
    case 5:
    case 6:
    case 7:{
      aggregate();
      break;
      }
    case 8:{
      ifExp();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void boolExp() throws ParseException {
    orExp();
}

  final public void aggregate() throws ParseException {
boolean hasCondition = false;
    switch (jj_nt.kind) {
    case 1:{
      jj_consume_token(1);
      jj_consume_token(2);
      boolExp();
      switch (jj_nt.kind) {
      case 3:{
        jj_consume_token(3);
        boolExp();
hasCondition = true;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(4);
tree.firstExp(hasCondition);
      break;
      }
    case 5:{
      jj_consume_token(5);
      jj_consume_token(2);
      boolExp();
      jj_consume_token(4);
tree.lastExp();
      break;
      }
    case 6:{
      jj_consume_token(6);
      jj_consume_token(2);
      switch (jj_nt.kind) {
      case 2:
      case 19:
      case 20:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:{
        numExp();
        break;
        }
      case 34:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:{
        strExp();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case 3:{
        jj_consume_token(3);
        boolExp();
hasCondition = true;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(4);
tree.minExp(hasCondition);
      break;
      }
    case 7:{
      jj_consume_token(7);
      jj_consume_token(2);
      switch (jj_nt.kind) {
      case 2:
      case 19:
      case 20:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:{
        numExp();
        break;
        }
      case 34:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:{
        strExp();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case 3:{
        jj_consume_token(3);
        boolExp();
hasCondition = true;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(4);
tree.maxExp(hasCondition);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void ifExp() throws ParseException {
    jj_consume_token(8);
    jj_consume_token(2);
    boolExp();
    jj_consume_token(3);
    exp();
    jj_consume_token(3);
    exp();
    jj_consume_token(4);
tree.ifExp();
}

  final public void orExp() throws ParseException {
    andExp();
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case 9:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_1;
      }
      jj_consume_token(9);
      andExp();
tree.orExp();
    }
}

  final public void andExp() throws ParseException {
    notExp();
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case 10:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(10);
      notExp();
tree.andExp();
    }
}

  final public void notExp() throws ParseException {
    switch (jj_nt.kind) {
    case 11:
    case 12:{
      switch (jj_nt.kind) {
      case 11:{
        jj_consume_token(11);
        break;
        }
      case 12:{
        jj_consume_token(12);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      baseBoolExp();
tree.notExp();
      break;
      }
    case 2:
    case 19:
    case 20:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case TRUE:
    case FALSE:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:{
      baseBoolExp();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void baseBoolExp() throws ParseException {
    switch (jj_nt.kind) {
    case TRUE:
    case FALSE:{
      boolScalar();
      break;
      }
    case 2:
    case 19:
    case 20:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 34:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:{
      comparison();
      break;
      }
    case 33:{
      boolType();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void comparison() throws ParseException {
    switch (jj_nt.kind) {
    case 2:
    case 19:
    case 20:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:{
      numExp();
      switch (jj_nt.kind) {
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:{
        switch (jj_nt.kind) {
        case 13:{
          jj_consume_token(13);
          numExp();
tree.gtExp();
          break;
          }
        case 14:{
          jj_consume_token(14);
          numExp();
tree.geExp();
          break;
          }
        case 15:{
          jj_consume_token(15);
          numExp();
tree.ltExp();
          break;
          }
        case 16:{
          jj_consume_token(16);
          numExp();
tree.leExp();
          break;
          }
        case 17:{
          jj_consume_token(17);
          numExp();
tree.eqExp();
          break;
          }
        case 18:{
          jj_consume_token(18);
          numExp();
tree.neExp();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
      }
    case 34:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:{
      strExp();
      switch (jj_nt.kind) {
      case 17:
      case 18:{
        switch (jj_nt.kind) {
        case 17:{
          jj_consume_token(17);
          strExp();
tree.eqExp();
          break;
          }
        case 18:{
          jj_consume_token(18);
          strExp();
tree.neExp();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void numExp() throws ParseException {
    plusMinusExp();
}

  final public void plusMinusExp() throws ParseException {
    multiplyDivideExp();
    label_3:
    while (true) {
      switch (jj_nt.kind) {
      case 19:
      case 20:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_3;
      }
      switch (jj_nt.kind) {
      case 19:{
        jj_consume_token(19);
        multiplyDivideExp();
tree.addExp();
        break;
        }
      case 20:{
        jj_consume_token(20);
        multiplyDivideExp();
tree.subExp();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void multiplyDivideExp() throws ParseException {
    numericNegate();
    label_4:
    while (true) {
      switch (jj_nt.kind) {
      case 21:
      case 22:
      case 23:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_4;
      }
      switch (jj_nt.kind) {
      case 21:{
        jj_consume_token(21);
        numericNegate();
tree.mulExp();
        break;
        }
      case 22:{
        jj_consume_token(22);
        numericNegate();
tree.divExp();
        break;
        }
      case 23:{
        jj_consume_token(23);
        numericNegate();
tree.modExp();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void numericNegate() throws ParseException {
    switch (jj_nt.kind) {
    case 2:
    case 19:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:{
      switch (jj_nt.kind) {
      case 19:{
        jj_consume_token(19);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      numericBetween();
      break;
      }
    case 20:{
      jj_consume_token(20);
      numericNegate();
tree.negateExp();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void numericBetween() throws ParseException {
    switch (jj_nt.kind) {
    case 24:{
      jj_consume_token(24);
      baseNumExp();
      jj_consume_token(10);
      baseNumExp();
tree.betweenExp();
      break;
      }
    case 2:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:{
      baseNumExp();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void baseNumExp() throws ParseException {
    switch (jj_nt.kind) {
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:{
      numScalar();
      break;
      }
    case 30:
    case 31:
    case 32:{
      numType();
      break;
      }
    case 25:{
      numFn();
      break;
      }
    case 26:
    case 27:
    case 28:
    case 29:{
      numAgg();
      break;
      }
    case 2:{
      parenExp();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void numFn() throws ParseException {
    jj_consume_token(25);
    jj_consume_token(2);
    baseNumExp();
    jj_consume_token(4);
tree.absExp();
}

  final public void numAgg() throws ParseException {
    switch (jj_nt.kind) {
    case 26:{
      jj_consume_token(26);
      jj_consume_token(2);
      numExp();
      jj_consume_token(4);
tree.sumExp();
      break;
      }
    case 27:{
      jj_consume_token(27);
      jj_consume_token(2);
      numExp();
      jj_consume_token(4);
tree.cumSumExp();
      break;
      }
    case 28:{
      jj_consume_token(28);
      jj_consume_token(2);
      numExp();
      jj_consume_token(4);
tree.avgExp();
      break;
      }
    case 29:{
      jj_consume_token(29);
      jj_consume_token(2);
      numExp();
      jj_consume_token(4);
tree.medianExp();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void strExp() throws ParseException {
    switch (jj_nt.kind) {
    case CHARACTER_LITERAL:
    case STRING_LITERAL:{
      strScalar();
      break;
      }
    case 34:{
      strType();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void parenExp() throws ParseException {
    jj_consume_token(2);
    boolExp();
    jj_consume_token(4);
tree.validateParenExp();
}

  final public void numType() throws ParseException {
    switch (jj_nt.kind) {
    case 30:{
      intType();
      break;
      }
    case 31:{
      longType();
      break;
      }
    case 32:{
      floatType();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void intType() throws ParseException {
    jj_consume_token(30);
    jj_consume_token(2);
    columnId();
    jj_consume_token(4);
tree.intCol();
}

  final public void longType() throws ParseException {
    jj_consume_token(31);
    jj_consume_token(2);
    columnId();
    jj_consume_token(4);
tree.longCol();
}

  final public void floatType() throws ParseException {
    jj_consume_token(32);
    jj_consume_token(2);
    columnId();
    jj_consume_token(4);
tree.floatCol();
}

  final public void boolType() throws ParseException {
    jj_consume_token(33);
    jj_consume_token(2);
    columnId();
    jj_consume_token(4);
tree.boolCol();
}

  final public void strType() throws ParseException {
    jj_consume_token(34);
    jj_consume_token(2);
    columnId();
    jj_consume_token(4);
tree.strCol();
}

  final public void boolScalar() throws ParseException {
    switch (jj_nt.kind) {
    case TRUE:{
      jj_consume_token(TRUE);
tree.trueExp();
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
tree.falseExp();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void numScalar() throws ParseException {
    switch (jj_nt.kind) {
    case LONG_LITERAL:{
      jj_consume_token(LONG_LITERAL);
tree.longVal(token.image);
      break;
      }
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
tree.intVal(token.image);
      break;
      }
    case FLOATING_POINT_LITERAL:{
      jj_consume_token(FLOATING_POINT_LITERAL);
tree.floatVal(token.image);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void columnId() throws ParseException {
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
tree.intVal(token.image);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
tree.strVal(token.image);
      break;
      }
    case CHARACTER_LITERAL:
    case STRING_LITERAL:{
      strScalar();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void strScalar() throws ParseException {
    switch (jj_nt.kind) {
    case CHARACTER_LITERAL:{
      jj_consume_token(CHARACTER_LITERAL);
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
tree.strVal(token.image, true);
}

  /** Generated Token Manager. */
  public ExpParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xff1819e6,0x8,0xff180004,0x8,0xff180004,0x8,0xe2,0x200,0x400,0x1800,0xff181804,0xff180004,0x7e000,0x7e000,0x60000,0x60000,0xff180004,0x180000,0x180000,0xe00000,0xe00000,0x80000,0xff180004,0xff000004,0xfe000004,0x3c000000,0x0,0xc0000000,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x3010f7,0x0,0x3010c5,0x0,0x3010c5,0x0,0x0,0x0,0x0,0x0,0x3010f7,0x3010f7,0x0,0x0,0x0,0x0,0x3010c5,0x0,0x0,0x0,0x0,0x0,0x10c1,0x10c1,0x10c1,0x0,0x300004,0x1,0x30,0x10c0,0x700080,0x300000,};
	}

  /** Constructor. */
  public ExpParser(Provider stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new ExpParserTokenManager(jj_input_stream);
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ExpParser(String dsl) throws ParseException, TokenMgrException {
	   this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
	  ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ExpParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ExpParser(ExpParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExpParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken = token;
	 if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
	 else jj_nt = jj_nt.next = token_source.getNextToken();
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 jj_nt = token;
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
	 else jj_nt = jj_nt.next = token_source.getNextToken();
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[61];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 32; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 61; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : ExpParserTokenManager.lexStateNames[token_source.curLexState]);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
