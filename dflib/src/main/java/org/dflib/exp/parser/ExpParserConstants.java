/* Generated By:JavaCC: Do not edit this line. ExpParserConstants.java */
package org.dflib.exp.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
interface ExpParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NULL = 38;
  /** RegularExpression Id. */
  int TRUE = 39;
  /** RegularExpression Id. */
  int FALSE = 40;
  /** RegularExpression Id. */
  int LONG_LITERAL = 41;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 42;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 43;
  /** RegularExpression Id. */
  int HEX_LITERAL = 44;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 45;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 46;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 47;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 48;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 49;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 50;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 51;
  /** RegularExpression Id. */
  int HEX_DIGITS = 52;
  /** RegularExpression Id. */
  int ESCAPE = 53;
  /** RegularExpression Id. */
  int UNICODE_ESCAPE = 54;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 55;
  /** RegularExpression Id. */
  int STRING_LITERAL = 56;
  /** RegularExpression Id. */
  int IDENTIFIER = 57;
  /** RegularExpression Id. */
  int LETTER = 58;
  /** RegularExpression Id. */
  int PART_LETTER = 59;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"first\"",
    "\"(\"",
    "\",\"",
    "\")\"",
    "\"last\"",
    "\"min\"",
    "\"max\"",
    "\"split\"",
    "\"if\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"!\"",
    "\"matches\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"=\"",
    "\"!=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"between\"",
    "\"abs\"",
    "\"len\"",
    "\"sum\"",
    "\"cumsum\"",
    "\"avg\"",
    "\"median\"",
    "\"int\"",
    "\"long\"",
    "\"float\"",
    "\"bool\"",
    "\"str\"",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "<LONG_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<HEX_DIGITS>",
    "<ESCAPE>",
    "<UNICODE_ESCAPE>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
  };

}
